{"version":3,"file":"index.esm.js","sources":["../src/util/to-buffer.ts","../src/publickey.ts","../src/account.ts","../src/bpf-loader-deprecated.ts","../src/layout.ts","../src/util/shortvec-encoding.ts","../src/message.ts","../src/transaction.ts","../src/sysvar.ts","../src/util/send-and-confirm-transaction.ts","../src/util/sleep.ts","../src/instruction.ts","../src/fee-calculator.ts","../src/nonce-account.ts","../src/system-program.ts","../src/loader.ts","../src/bpf-loader.ts","../src/agent-manager.ts","../src/timing.ts","../src/util/promise-timeout.ts","../src/connection.ts","../src/stake-program.ts","../src/secp256k1-program.ts","../src/validator-info.ts","../src/vote-account.ts","../src/util/send-and-confirm-raw-transaction.ts","../src/util/cluster.ts","../src/index.ts"],"sourcesContent":["import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (arr instanceof Buffer) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport nacl from 'tweetnacl';\nimport {sha256} from 'crypto-hash';\nimport {Buffer} from 'buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * A public key\n */\nexport class PublicKey {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: number | string | Buffer | Uint8Array | Array<number>) {\n    if (typeof value === 'string') {\n      // assume base 58 encoding by default\n      const decoded = bs58.decode(value);\n      if (decoded.length != 32) {\n        throw new Error(`Invalid public key input`);\n      }\n      this._bn = new BN(decoded);\n    } else {\n      this._bn = new BN(value);\n    }\n\n    if (this._bn.byteLength() > 32) {\n      throw new Error(`Invalid public key input`);\n    }\n  }\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBuffer());\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = await sha256(new Uint8Array(buffer));\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new Error(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, Buffer.from(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = await sha256(new Uint8Array(buffer));\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n}\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0,\n  0x4a0e,\n  0x1b27,\n  0xc4ee,\n  0xe478,\n  0xad2f,\n  0x1806,\n  0x2f43,\n  0xd7a7,\n  0x3dfb,\n  0x0099,\n  0x2b4d,\n  0xdf0b,\n  0x4fc1,\n  0x2480,\n  0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import * as nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey'): Object => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): Object => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer: any, offset: any) => {\n    const data = _decode(buffer, offset);\n    return data.chars.toString('utf8');\n  };\n\n  rsl.encode = (str: any, buffer: any, offset: any) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  rsl.alloc = (str: any) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rsl;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct(\n    [publicKey('staker'), publicKey('withdrawer')],\n    property,\n  );\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from 'buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\n\n/**\n * The message header, identifying signed and read-only account\n *\n * @typedef {Object} MessageHeader\n * @property {number} numRequiredSignatures The number of signatures required for this message to be considered valid. The\n * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n * @property {number} numReadonlySignedAccounts: The last `numReadonlySignedAccounts` of the signed keys are read-only accounts\n * @property {number} numReadonlyUnsignedAccounts The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts\n */\nexport type MessageHeader = {\n  numRequiredSignatures: number;\n  numReadonlySignedAccounts: number;\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @typedef {Object} CompiledInstruction\n * @property {number} programIdIndex Index into the transaction keys array indicating the program account that executes this instruction\n * @property {number[]} accounts Ordered indices into the transaction keys array indicating which accounts to pass to the program\n * @property {string} data The program input data encoded as base 58\n */\nexport type CompiledInstruction = {\n  programIdIndex: number;\n  accounts: number[];\n  data: string;\n};\n\n/**\n * Message constructor arguments\n *\n * @typedef {Object} MessageArgs\n * @property {MessageHeader} header The message header, identifying signed and read-only `accountKeys`\n * @property {string[]} accounts All the account keys used by this transaction\n * @property {Blockhash} recentBlockhash The hash of a recent ledger block\n * @property {CompiledInstruction[]} instructions Instructions that will be executed in sequence and committed in one atomic transaction if all succeed.\n */\nexport type MessageArgs = {\n  header: MessageHeader;\n  accountKeys: string[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = bs58.decode(instruction.data);\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => key.toBuffer()),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import invariant from 'assert';\nimport nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport type {CompiledInstruction} from './message';\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport {Account} from './account';\nimport * as shortvec from './util/shortvec-encoding';\nimport type {Blockhash} from './blockhash';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * @typedef {string} TransactionSignature\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n *\n * @typedef {Object} AccountMeta\n * @property {PublicKey} pubkey An account's public key\n * @property {boolean} isSigner True if an instruction requires a transaction signature matching `pubkey`\n * @property {boolean} isWritable True if the `pubkey` can be loaded as a read-write account.\n */\nexport type AccountMeta = {\n  pubkey: PublicKey;\n  isSigner: boolean;\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n *\n * @typedef {Object} TransactionInstructionCtorFields\n * @property {Array<PublicKey>} keys\n * @property {PublicKey} programId\n * @property {?Buffer} data\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n *\n * @typedef {Object} SerializeConfig\n * @property {boolean|undefined} requireAllSignatures Require all transaction signatures be present (default: true)\n * @property {boolean|undefined} verifySignatures Verify provided signatures (default: true)\n */\nexport type SerializeConfig = {\n  requireAllSignatures?: boolean;\n  verifySignatures?: boolean;\n};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n}\n\n/**\n * @internal\n */\ntype SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n * @typedef {Object} TransactionCtorFields\n * @property {?Blockhash} recentBlockhash A recent blockhash\n * @property {?PublicKey} feePayer The transaction fee payer\n * @property {?Array<SignaturePubkeyPair>} signatures One or more signatures\n *\n */\ntype TransactionCtorFields = {\n  recentBlockhash?: Blockhash | null;\n  nonceInfo?: NonceInformation | null;\n  feePayer?: PublicKey | null;\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * NonceInformation to be used to build a Transaction.\n *\n * @typedef {Object} NonceInformation\n * @property {Blockhash} nonce The current Nonce blockhash\n * @property {TransactionInstruction} nonceInstruction AdvanceNonceAccount Instruction\n */\ntype NonceInformation = {\n  nonce: Blockhash;\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      throw new Error('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? 0 : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified accounts. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Account>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Account>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Account>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(message: Message, signatures: Array<string>): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(\n            keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n          ),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {Account} from '../account';\nimport type {ConfirmOptions} from '../connection';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Account>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Account>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from 'buffer-layout';\n\nimport * as Layout from './layout';\n\n/**\n * @typedef {Object} InstructionType\n * @property (index} The Instruction index (from solana upstream program)\n * @property (BufferLayout} The BufferLayout to use to build data\n * @internal\n */\nexport type InstructionType = {\n  index: number;\n  layout: typeof BufferLayout;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData(type: InstructionType, fields?: any): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): any {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","// @ts-ignore\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from 'buffer-layout';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator'),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from 'buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\n\n/**\n * Create account system transaction params\n * @typedef {Object} CreateAccountParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} newAccountPubkey\n * @property {number} lamports\n * @property {number} space\n * @property {PublicKey} programId\n */\nexport type CreateAccountParams = {\n  fromPubkey: PublicKey;\n  newAccountPubkey: PublicKey;\n  lamports: number;\n  space: number;\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n * @typedef {Object} TransferParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n */\nexport type TransferParams = {\n  fromPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Assign system transaction params\n * @typedef {Object} AssignParams\n * @property {PublicKey} accountPubkey\n * @property {PublicKey} programId\n */\nexport type AssignParams = {\n  accountPubkey: PublicKey;\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n * @typedef {Object} CreateAccountWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} newAccountPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {number} lamports\n * @property {number} space\n * @property {PublicKey} programId\n */\nexport type CreateAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  newAccountPubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n  space: number;\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n * @typedef {Object} CreateNonceAccountParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {number} lamports\n */\nexport type CreateNonceAccountParams = {\n  fromPubkey: PublicKey;\n  noncePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n * @typedef {Object} CreateNonceAccountWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {number} lamports\n */\nexport type CreateNonceAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  noncePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  lamports: number;\n  basePubkey: PublicKey;\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n * @typedef {Object} InitializeNonceParams\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n */\nexport type InitializeNonceParams = {\n  noncePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n * @typedef {Object} AdvanceNonceParams\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n */\nexport type AdvanceNonceParams = {\n  noncePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n * @typedef {Object} WithdrawNonceParams\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n */\nexport type WithdrawNonceParams = {\n  noncePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n * @typedef {Object} AuthorizeNonceParams\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} newAuthorizedPubkey\n */\nexport type AuthorizeNonceParams = {\n  noncePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n * @typedef {Object} AllocateParams\n * @property {PublicKey} accountPubkey\n * @property {number} space\n */\nexport type AllocateParams = {\n  accountPubkey: PublicKey;\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n * @typedef {Object} AllocateWithSeedParams\n * @property {PublicKey} accountPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {number} space\n * @property {PublicKey} programId\n */\nexport type AllocateWithSeedParams = {\n  accountPubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  space: number;\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n * @typedef {Object} AssignWithSeedParams\n * @property {PublicKey} accountPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {PublicKey} programId\n */\nexport type AssignWithSeedParams = {\n  accountPubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n * @typedef {Object} TransferWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} basePubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n * @property {string} seed\n * @property {PublicKey} programId\n */\nexport type TransferWithSeedParams = {\n  fromPubkey: PublicKey;\n  basePubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  seed: string;\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): TransferWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount';\n\n/**\n * An enumeration of valid system InstructionType's\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS: {\n  [type in SystemInstructionType]: InstructionType;\n} = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey('11111111111111111111111111111111');\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: params.programId.toBuffer(),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: params.programId.toBuffer(),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: params.lamports});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: params.basePubkey.toBuffer(),\n        seed: params.seed,\n        programId: params.programId.toBuffer(),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {programId: params.programId.toBuffer()});\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: params.basePubkey.toBuffer(),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: params.programId.toBuffer(),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: params.authorizedPubkey.toBuffer(),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: params.newAuthorizedPubkey.toBuffer(),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: params.basePubkey.toBuffer(),\n        seed: params.seed,\n        space: params.space,\n        programId: params.programId.toBuffer(),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from 'buffer-layout';\n\nimport {Account} from './account';\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport {SystemProgram} from './system-program';\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static get chunkSize(): number {\n    // Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n    // rest of the Transaction fields\n    //\n    // TODO: replace 300 with a proper constant for the size of the other\n    // Transaction fields\n    return PACKET_DATA_SIZE - 300;\n  }\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Account,\n    program: Account,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import {Account} from './account';\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Account,\n    program: Account,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","import http from 'http';\nimport https from 'https';\n\nexport const DESTROY_TIMEOUT_MS = 5000;\n\nexport class AgentManager {\n  _agent: http.Agent | https.Agent;\n  _activeRequests = 0;\n  _destroyTimeout: ReturnType<typeof setTimeout> | null = null;\n  _useHttps: boolean;\n\n  static _newAgent(useHttps: boolean): http.Agent | https.Agent {\n    const options = {keepAlive: true, maxSockets: 25};\n    if (useHttps) {\n      return new https.Agent(options);\n    } else {\n      return new http.Agent(options);\n    }\n  }\n\n  constructor(useHttps?: boolean) {\n    this._useHttps = useHttps === true;\n    this._agent = AgentManager._newAgent(this._useHttps);\n  }\n\n  requestStart(): http.Agent | https.Agent {\n    this._activeRequests++;\n    if (this._destroyTimeout !== null) {\n      clearTimeout(this._destroyTimeout);\n      this._destroyTimeout = null;\n    }\n    return this._agent;\n  }\n\n  requestEnd() {\n    this._activeRequests--;\n    if (this._activeRequests === 0 && this._destroyTimeout === null) {\n      this._destroyTimeout = setTimeout(() => {\n        this._agent.destroy();\n        this._agent = AgentManager._newAgent(this._useHttps);\n      }, DESTROY_TIMEOUT_MS);\n    }\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","export function promiseTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | null> {\n  let timeoutId: ReturnType<typeof setTimeout>;\n  const timeoutPromise: Promise<null> = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then((result: T | null) => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n","import assert from 'assert';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {parse as urlParse, format as urlFormat} from 'url';\nimport fetch, {Response} from 'node-fetch';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {IWSRequestParams} from 'rpc-websockets/dist/lib/client';\n\nimport {AgentManager} from './agent-manager';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {Account} from './account';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n *\n * @typedef {Object} ConfirmedSignaturesForAddress2Options\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n *\n * @typedef {'processed' | 'confirmed' | 'finalized'} Commitment\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n *\n * @typedef {'circulating' | 'nonCirculating'} LargestAccountsFilter\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n *\n * @typedef {Object} GetLargestAccountsConfig\n * @property {Commitment|undefined} commitment The level of commitment desired\n * @property {LargestAccountsFilter|undefined} filter Filter largest accounts by whether they are part of the circulating supply\n */\nexport type GetLargestAccountsConfig = {\n  commitment?: Commitment;\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing query behavior\n *\n * @typedef {Object} SignatureStatusConfig\n * @property {boolean} searchTransactionHistory enable searching status history, not needed for recent transactions\n */\nexport type SignatureStatusConfig = {\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n *\n * @typedef {Object} ContactInfo\n * @property {string} pubkey Identity public key of the node\n * @property {string|null} gossip Gossip network address for the node\n * @property {string|null} tpu TPU network address for the node (null if not available)\n * @property {string|null} rpc JSON RPC network address for the node (null if not available)\n * @property {string|null} version Software version of the node (null if not available)\n */\nexport type ContactInfo = {\n  pubkey: string;\n  gossip: string | null;\n  tpu: string | null;\n  rpc: string | null;\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n *\n * @typedef {Object} VoteAccountInfo\n * @property {string} votePubkey Public key of the vote account\n * @property {string} nodePubkey Identity public key of the node voting with this account\n * @property {number} activatedStake The stake, in lamports, delegated to this vote account and activated\n * @property {boolean} epochVoteAccount Whether the vote account is staked for this epoch\n * @property {Array<Array<number>>} epochCredits Recent epoch voting credit history for this voter\n * @property {number} commission A percentage (0-100) of rewards payout owed to the voter\n * @property {number} lastVote Most recent slot voted on by this vote account\n */\nexport type VoteAccountInfo = {\n  votePubkey: string;\n  nodePubkey: string;\n  activatedStake: number;\n  epochVoteAccount: boolean;\n  epochCredits: Array<[number, number, number]>;\n  commission: number;\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n *\n * @typedef {Object} VoteAccountStatus\n * @property {Array<VoteAccountInfo>} current Active vote accounts\n * @property {Array<VoteAccountInfo>} delinquent Inactive vote accounts\n */\nexport type VoteAccountStatus = {\n  current: Array<VoteAccountInfo>;\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n *\n * @typedef {Object} InflationGovernor\n * @property {number} foundation\n * @property {number} foundation_term\n * @property {number} initial\n * @property {number} taper\n * @property {number} terminal\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * Information about the current epoch\n *\n * @typedef {Object} EpochInfo\n * @property {number} epoch\n * @property {number} slotIndex\n * @property {number} slotsInEpoch\n * @property {number} absoluteSlot\n * @property {number} blockHeight\n * @property {number} transactionCount\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n *\n * @typedef {Object} EpochSchedule\n * @property {number} slotsPerEpoch The maximum number of slots in each epoch\n * @property {number} leaderScheduleSlotOffset The number of slots before beginning of an epoch to calculate a leader schedule for that epoch\n * @property {boolean} warmup Indicates whether epochs start short and grow\n * @property {number} firstNormalEpoch The first epoch with `slotsPerEpoch` slots\n * @property {number} firstNormalSlot The first slot of `firstNormalEpoch`\n */\nexport type EpochSchedule = {\n  slotsPerEpoch: number;\n  leaderScheduleSlotOffset: number;\n  warmup: boolean;\n  firstNormalEpoch: number;\n  firstNormalSlot: number;\n};\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n *\n * @typedef {Object} LeaderSchedule\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(pick({}));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\nexport type Version = {\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\n/**\n * Version info for a node\n *\n * @typedef {Object} Version\n * @property {string} solana-core Version of solana-core\n */\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @typedef {Object} ParsedConfirmedTransactionMeta\n * @property {number} fee The fee charged for processing the transaction\n * @property {Array<ParsedInnerInstruction>} innerInstructions An array of cross program invoked parsed instructions\n * @property {Array<number>} preBalances The balances of the transaction accounts before processing\n * @property {Array<number>} postBalances The balances of the transaction accounts after processing\n * @property {Array<string>} logMessages An array of program log messages emitted during a transaction\n * @property {Array<TokenBalance>} preTokenBalances The token balances of the transaction accounts before processing\n * @property {Array<TokenBalance>} postTokenBalances The token balances of the transaction accounts after processing\n * @property {object|null} err The error result of transaction processing\n */\nexport type ParsedConfirmedTransactionMeta = {\n  fee: number;\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  preBalances: Array<number>;\n  postBalances: Array<number>;\n  logMessages?: Array<string> | null;\n  preTokenBalances?: Array<TokenBalance> | null;\n  postTokenBalances?: Array<TokenBalance> | null;\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n *\n * @typedef {Object} ConfirmedTransactionMeta\n * @property {number} fee The fee charged for processing the transaction\n * @property {Array<CompiledInnerInstruction>} innerInstructions An array of cross program invoked instructions\n * @property {Array<number>} preBalances The balances of the transaction accounts before processing\n * @property {Array<number>} postBalances The balances of the transaction accounts after processing\n * @property {Array<string>} logMessages An array of program log messages emitted during a transaction\n * @property {Array<TokenBalance>} preTokenBalances The token balances of the transaction accounts before processing\n * @property {Array<TokenBalance>} postTokenBalances The token balances of the transaction accounts after processing\n * @property {object|null} err The error result of transaction processing\n */\nexport type ConfirmedTransactionMeta = {\n  fee: number;\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  preBalances: Array<number>;\n  postBalances: Array<number>;\n  logMessages?: Array<string> | null;\n  preTokenBalances?: Array<TokenBalance> | null;\n  postTokenBalances?: Array<TokenBalance> | null;\n  err: TransactionError | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @typedef {Object} ConfirmedTransaction\n * @property {number} slot The slot during which the transaction was processed\n * @property {Transaction} transaction The details of the transaction\n * @property {ConfirmedTransactionMeta|null} meta Metadata produced from the transaction\n * @property {number|null|undefined} blockTime The unix timestamp of when the transaction was processed\n */\nexport type ConfirmedTransaction = {\n  slot: number;\n  transaction: Transaction;\n  meta: ConfirmedTransactionMeta | null;\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n *\n * @typedef {Object} ParsedMessageAccount\n * @property {PublicKey} pubkey Public key of the account\n * @property {boolean} signer Indicates if the account signed the transaction\n * @property {boolean} writable Indicates if the account is writable for this transaction\n */\nexport type ParsedMessageAccount = {\n  pubkey: PublicKey;\n  signer: boolean;\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n *\n * @typedef {Object} ParsedInstruction\n * @property {string} program Name of the program for this instruction\n * @property {PublicKey} programId ID of the program for this instruction\n * @property {any} parsed Parsed instruction info\n */\nexport type ParsedInstruction = {\n  program: string;\n  programId: PublicKey;\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n *\n * @typedef {Object} ParsedMessage\n * @property {Array<ParsedMessageAccount>} accountKeys Accounts used in the instructions\n * @property {Array<ParsedInstruction | PartiallyDecodedInstruction>} instructions The atomically executed instructions for the transaction\n * @property {string} recentBlockhash Recent blockhash\n */\nexport type ParsedMessage = {\n  accountKeys: ParsedMessageAccount[];\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n *\n * @typedef {Object} ParsedTransaction\n * @property {Array<string>} signatures Signatures for the transaction\n * @property {ParsedMessage} message Message of the transaction\n */\nexport type ParsedTransaction = {\n  signatures: Array<string>;\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @typedef {Object} ParsedConfirmedTransaction\n * @property {number} slot The slot during which the transaction was processed\n * @property {ParsedTransaction} transaction The details of the transaction\n * @property {ConfirmedTransactionMeta|null} meta Metadata produced from the transaction\n * @property {number|null|undefined} blockTime The unix timestamp of when the transaction was processed\n */\nexport type ParsedConfirmedTransaction = {\n  slot: number;\n  transaction: ParsedTransaction;\n  meta: ParsedConfirmedTransactionMeta | null;\n  blockTime?: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n *\n * @typedef {Object} ConfirmedBlock\n * @property {Blockhash} blockhash Blockhash of this block\n * @property {Blockhash} previousBlockhash Blockhash of this block's parent\n * @property {number} parentSlot Slot index of this block's parent\n * @property {Array<object>} transactions Vector of transactions and status metas\n * @property {Array<object>} rewards Vector of block rewards\n * @property {number|null} blockTime The unix timestamp of when the block was processed\n */\nexport type ConfirmedBlock = {\n  blockhash: Blockhash;\n  previousBlockhash: Blockhash;\n  parentSlot: number;\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  blockTime: number | null;\n};\n\n/**\n * A performance sample\n *\n * @typedef {Object} PerfSample\n * @property {number} slot Slot number of sample\n * @property {number} numTransactions Number of transactions in a sample window\n * @property {number} numSlots Number of slots in a sample window\n * @property {number} samplePeriodSecs Sample window in seconds\n */\nexport type PerfSample = {\n  slot: number;\n  numTransactions: number;\n  numSlots: number;\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(url: string, useHttps: boolean): RpcClient {\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        res = await fetch(url, options);\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n *\n * @typedef {Object} Supply\n * @property {number} total Total supply in lamports\n * @property {number} circulating Circulating supply in lamports\n * @property {number} nonCirculating Non-circulating supply in lamports\n * @property {Array<PublicKey>} nonCirculatingAccounts List of non-circulating account addresses\n */\nexport type Supply = {\n  total: number;\n  circulating: number;\n  nonCirculating: number;\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n *\n * @typedef {Object} TokenAmount\n * @property {string} amount Raw amount of tokens as string ignoring decimals\n * @property {number} decimals Number of decimals configured for token's mint\n * @property {number | null} uiAmount Token amount as float, accounts for decimals\n * @property {string | undefined} uiAmountString Token amount as string, accounts for decimals\n */\nexport type TokenAmount = {\n  amount: string;\n  decimals: number;\n  uiAmount: number | null;\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n *\n * @typedef {Object} TokenAccountBalancePair\n * @property {PublicKey} address Address of the token account\n * @property {string} amount Raw amount of tokens as string ignoring decimals\n * @property {number} decimals Number of decimals configured for token's mint\n * @property {number | null} uiAmount Token amount as float, accounts for decimals\n * @property {string | undefined} uiAmountString Token amount as string, accounts for decimals\n */\nexport type TokenAccountBalancePair = {\n  address: PublicKey;\n  amount: string;\n  decimals: number;\n  uiAmount: number | null;\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n *\n * @typedef {Object} AccountBalancePair\n * @property {PublicKey} address\n * @property {number} lamports\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress\" message\n */\nconst GetConfirmedSignaturesForAddressRpcResult = jsonRpcResult(\n  array(string()),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\n/**\n * @internal\n */\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TransactionFromConfirmed = coerce(\n  instance(Transaction),\n  ConfirmedTransactionResult,\n  result => {\n    const {message, signatures} = result;\n    return Transaction.populate(new Message(message), signatures);\n  },\n);\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n */\nexport const GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: TransactionFromConfirmed,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: TransactionFromConfirmed,\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetParsedConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n *\n * @typedef {Object} SlotInfo\n * @property {number} slot Currently processing slot\n * @property {number} parent Parent of the current slot\n * @property {number} root The root block of the current slot's fork\n */\nexport type SlotInfo = {\n  slot: number;\n  parent: number;\n  root: number;\n};\n\n/**\n * Parsed account data\n *\n * @typedef {Object} ParsedAccountData\n * @property {string} program Name of the program that owns this account\n * @property {any} parsed Parsed account data\n * @property {number} space Space used by account data\n */\nexport type ParsedAccountData = {\n  program: string;\n  parsed: any;\n  space: number;\n};\n\n/**\n * Stake Activation data\n *\n * @typedef {Object} StakeActivationData\n * @property {string} state: <string - the stake account's activation state, one of: active, inactive, activating, deactivating\n * @property {number} active: stake active during the epoch\n * @property {number} inactive: stake inactive during the epoch\n */\nexport type StakeActivationData = {\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  active: number;\n  inactive: number;\n};\n\n/**\n * Information describing an account\n *\n * @typedef {Object} AccountInfo\n * @property {number} lamports Number of lamports assigned to the account\n * @property {PublicKey} owner Identifier of the program that owns the account\n * @property {T} data Optional data assigned to the account\n * @property {boolean} executable `true` if this account's data contains a loaded program\n */\nexport type AccountInfo<T> = {\n  executable: boolean;\n  owner: PublicKey;\n  lamports: number;\n  data: T;\n};\n\n/**\n * Account information identified by pubkey\n *\n * @typedef {Object} KeyedAccountInfo\n * @property {PublicKey} accountId\n * @property {AccountInfo<Buffer>} accountInfo\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @internal\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string; // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string; // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @internal\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * @internal\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature; // TransactionSignature as a base 58 string\n  callback: SignatureSubscriptionCallback;\n  options?: SignatureSubscriptionOptions;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n *\n * @typedef {Object} Logs.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * @private\n */\ntype LogsSubscriptionInfo = {\n  callback: LogsCallback;\n  filter: LogsFilter;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  commitment?: Commitment;\n};\n\n/**\n * Signature result\n *\n * @typedef {Object} SignatureResult\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n *\n * @typedef {Object} TransactionError\n */\nexport type TransactionError = {};\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n *\n * @typedef {Object} ConfirmedSignatureInfo\n * @property {string} signature the transaction signature\n * @property {number} slot when the transaction was processed\n * @property {TransactionError | null} err error, if any\n * @property {string | null} memo memo associated with the transaction, if any\n * @property {number | null | undefined} blockTime The unix timestamp of when the transaction was processed\n */\nexport type ConfirmedSignatureInfo = {\n  signature: string;\n  slot: number;\n  err: TransactionError | null;\n  memo: string | null;\n  blockTime?: number | null;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    recentBlockhash: Blockhash | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  };\n\n  /** @internal */ _accountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _accountChangeSubscriptions: {\n    [id: number]: AccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _programAccountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _programAccountChangeSubscriptions: {\n    [id: number]: ProgramAccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _rootSubscriptionCounter: number = 0;\n  /** @internal */ _rootSubscriptions: {\n    [id: number]: RootSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _signatureSubscriptionCounter: number = 0;\n  /** @internal */ _signatureSubscriptions: {\n    [id: number]: SignatureSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotSubscriptionCounter: number = 0;\n  /** @internal */ _slotSubscriptions: {\n    [id: number]: SlotSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _logsSubscriptionCounter: number = 0;\n  /** @internal */ _logsSubscriptions: {\n    [id: number]: LogsSubscriptionInfo;\n  } = {};\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitment optional default commitment level\n   */\n  constructor(endpoint: string, commitment?: Commitment) {\n    this._rpcEndpoint = endpoint;\n\n    let url = urlParse(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    this._rpcClient = createRpcClient(url.href, useHttps);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._commitment = commitment;\n    this._blockhashInfo = {\n      recentBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: [],\n    };\n\n    url.protocol = useHttps ? 'wss:' : 'ws:';\n    url.host = '';\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    if (url.port !== null) {\n      url.port = String(Number(url.port) + 1);\n    }\n    this._rpcWebSocket = new RpcWebSocketClient(urlFormat(url), {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    commitment?: Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const args = this._buildArgs([programId.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve(null);\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip': {\n        timeoutMs = 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'finalized':\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTotalSupply', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get total supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block\n   */\n  async getConfirmedBlock(slot: number): Promise<ConfirmedBlock> {\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', [slot]);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n  ): Promise<ConfirmedTransaction | null> {\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', [\n      signature,\n    ]);\n    const res = create(unsafeRes, GetConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', [\n      signature,\n      'jsonParsed',\n    ]);\n    const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      return {\n        methodName: 'getConfirmedTransaction',\n        args: [signature, 'jsonParsed'],\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress',\n      [address.toBase58(), startSlot, endSlot],\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      [address.toBase58(), options],\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified account\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    amount: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      amount,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transaction: Transaction,\n    signers?: Array<Account>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        // If the signature of this transaction has not been seen before with the\n        // current recentBlockhash, all done.\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          disableCache = true;\n        }\n      }\n    }\n\n    const signData = transaction.serializeMessage();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      throw new Error('failed to simulate transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Account>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        // If the signature of this transaction has not been seen before with the\n        // current recentBlockhash, all done.\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      if ('data' in res.error) {\n        const logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new Error('failed to send transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  async _subscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n    rpcArgs: IWSRequestParams,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        console.error(`${rpcMethod} error for argument`, rpcArgs, err.message);\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async _unsubscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        console.error(`${rpcMethod} error:`, err.message);\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _resetSubscriptions() {\n    Object.values(this._accountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._programAccountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._signatureSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._rootSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    const logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0 &&\n      logsKeys.length === 0\n    ) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          this._rpcWebSocket.close();\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      const args: any[] = [sub.signature];\n      if (sub.options) args.push(sub.options);\n      this._subscribe(sub, 'signatureSubscribe', args);\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n\n    for (let id of logsKeys) {\n      const sub = this._logsSubscriptions[id];\n      let filter;\n      if (typeof sub.filter === 'object') {\n        filter = {mentions: [sub.filter.toString()]};\n      } else {\n        filter = sub.filter;\n      }\n      this._subscribe(\n        sub,\n        'logsSubscribe',\n        this._buildArgs([filter], sub.commitment),\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const res = create(notification, AccountNotificationResult);\n    for (const sub of Object.values(this._accountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = create(notification, ProgramAccountNotificationResult);\n    for (const sub of Object.values(this._programAccountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        const {value, context} = res.result;\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: value.account,\n          },\n          context,\n        );\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._logsSubscriptionCounter;\n    this._logsSubscriptions[id] = {\n      filter,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id subscription id to deregister.\n   */\n  async removeOnLogsListener(id: number): Promise<void> {\n    if (!this._logsSubscriptions[id]) {\n      throw new Error(`Unknown logs id: ${id}`);\n    }\n    const subInfo = this._logsSubscriptions[id];\n    delete this._logsSubscriptions[id];\n    await this._unsubscribe(subInfo, 'logsUnsubscribe');\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const res = create(notification, LogsNotificationResult);\n    const keys = Object.keys(this._logsSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._logsSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = create(notification, SlotNotificationResult);\n    for (const sub of Object.values(this._slotSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = create(notification, SignatureNotificationResult);\n    for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        if (res.result.value === 'receivedSignature') {\n          sub.callback(\n            {\n              type: 'received',\n            },\n            res.result.context,\n          );\n        } else {\n          // Signatures subscriptions are auto-removed by the RPC service so\n          // no need to explicitly send an unsubscribe message\n          delete this._signatureSubscriptions[Number(id)];\n          this._updateSubscriptions();\n          sub.callback(\n            {\n              type: 'status',\n              result: res.result.value,\n            },\n            res.result.context,\n          );\n        }\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n        }\n      },\n      options: {commitment},\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      options,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = create(notification, RootNotificationResult);\n    for (const sub of Object.values(this._rootSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n","import * as BufferLayout from 'buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n}\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  | 'AuthorizeWithSeed'\n  | 'Authorize'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Split'\n  | 'Withdraw';\n\n/**\n * An enumeration of valid stake InstructionType's\n */\nexport const STAKE_INSTRUCTION_LAYOUTS: {\n  [type in StakeInstructionType]: InstructionType;\n} = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n      Layout.rustString('authoritySeed'),\n      Layout.publicKey('authorityOwner'),\n    ]),\n  },\n});\n\n/**\n * @typedef {Object} StakeAuthorizationType\n * @property (index} The Stake Authorization index (from solana-stake-program)\n */\nexport type StakeAuthorizationType = {\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey('Stake11111111111111111111111111111111111111');\n  }\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `std::mem::size_of::<StakeState>()`:\n   * https://docs.rs/solana-stake-program/1.4.4/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static get space(): number {\n    return 200;\n  }\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: authorized.staker.toBuffer(),\n        withdrawer: authorized.withdrawer.toBuffer(),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: lockup.custodian.toBuffer(),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: newAuthorizedPubkey.toBuffer(),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: newAuthorizedPubkey.toBuffer(),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: authorityOwner.toBuffer(),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: authorizedPubkey,\n        newAccountPubkey: splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n\n    return transaction.add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey,\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from 'buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport assert from 'assert';\nimport {keccak_256} from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n * @typedef {Object} CreateSecp256k1InstructionWithPublicKeyParams\n * @property {Buffer | Uint8Array | Array<number>} publicKey\n * @property {Buffer | Uint8Array | Array<number>} message\n * @property {Buffer | Uint8Array | Array<number>} signature\n * @property {number} recoveryId\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n * @typedef {Object} CreateSecp256k1InstructionWithEthAddressParams\n * @property {Buffer | Uint8Array | Array<number>} ethAddress\n * @property {Buffer | Uint8Array | Array<number>} message\n * @property {Buffer | Uint8Array | Array<number>} signature\n * @property {number} recoveryId\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n * @typedef {Object} CreateSecp256k1InstructionWithPrivateKeyParams\n * @property {Buffer | Uint8Array | Array<number>} privateKey\n * @property {Buffer | Uint8Array | Array<number>} message\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey('KeccakSecp256k11111111111111111111111111111');\n  }\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256.update(toBuffer(publicKey)).digest()).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId} = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {ethAddress: rawAddress, message, signature, recoveryId} = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: 0,\n        ethAddressOffset,\n        ethAddressInstructionIndex: 0,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: 0,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    let privateKey;\n    if (Array.isArray(pkey)) {\n      privateKey = Uint8Array.from(pkey);\n    } else {\n      privateKey = pkey;\n    }\n\n    try {\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n *\n * @typedef {Object} Info\n * @property {string} name validator name\n * @property {?string} website optional, validator website\n * @property {?string} details optional, extra information the validator chose to share\n * @property {?string} keybaseUsername optional, used to identify validators on keybase.io\n */\nexport type Info = {\n  name: string;\n  website?: string;\n  details?: string;\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from 'buffer-layout';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = {\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n};\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedVoterPubkey'),\n  Layout.publicKey('authorizedWithdrawerPubkey'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64('epoch'),\n  BufferLayout.nu64('credits'),\n  BufferLayout.nu64('lastEpochCredits'),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedVoterPubkey = args.authorizedVoterPubkey;\n    this.authorizedWithdrawerPubkey = args.authorizedWithdrawerPubkey;\n    this.commission = args.commission;\n    this.votes = args.votes;\n    this.rootSlot = args.rootSlot;\n    this.epoch = args.epoch;\n    this.credits = args.credits;\n    this.lastEpochCredits = args.lastEpochCredits;\n    this.epochCredits = args.epochCredits;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const va = VoteAccountLayout.decode(toBuffer(buffer), 0);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedVoterPubkey: new PublicKey(va.authorizedVoterPubkey),\n      authorizedWithdrawerPubkey: new PublicKey(va.authorizedWithdrawerPubkey),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      epoch: va.epoch,\n      credits: va.credits,\n      lastEpochCredits: va.lastEpochCredits,\n      epochCredits: va.epochCredits,\n    });\n  }\n}\n","import {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://devnet.solana.com',\n    testnet: 'http://testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com',\n  },\n  https: {\n    devnet: 'https://devnet.solana.com',\n    testnet: 'https://testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './fee-calculator';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],"names":["toBuffer","arr","Buffer","Uint8Array","from","buffer","byteOffset","byteLength","MAX_SEED_LENGTH","PublicKey","constructor","value","decoded","bs58","decode","length","Error","_bn","BN","equals","publicKey","eq","toBase58","encode","b","toArrayLike","zeroPad","alloc","copy","toString","createWithSeed","fromPublicKey","seed","programId","concat","hash","sha256","createProgramAddress","seeds","forEach","publicKeyBytes","toArray","undefined","is_on_curve","findProgramAddress","nonce","address","seedsWithNonce","err","naclLowLevel","nacl","lowlevel","p","r","gf","t","chk","num","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","D","Z","A","pow2523","neq25519","I","a","c","d","pack25519","crypto_verify_32","Account","secretKey","_keypair","sign","keyPair","fromSecretKey","BPF_LOADER_DEPRECATED_PROGRAM_ID","property","BufferLayout","blob","rustString","rsl","struct","u32","offset","_decode","bind","_encode","data","chars","str","span","authorized","lockup","ns64","getAlloc","type","fields","layout","item","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","push","PUBKEY_LENGTH","Message","args","header","accountKeys","map","account","recentBlockhash","instructions","isAccountWritable","index","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","serialize","numKeys","keyCount","shortvec","instruction","accounts","programIdIndex","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","PACKET_DATA_SIZE","instructionBufferLength","instructionLayout","u8","seq","slice","signDataLayout","Layout","transaction","keys","key","signData","byteArray","accountCount","i","dataSlice","messageArgs","DEFAULT_SIGNATURE","fill","SIGNATURE_LENGTH","TransactionInstruction","opts","Transaction","signature","signatures","Object","assign","add","items","compileMessage","nonceInfo","nonceInstruction","unshift","feePayer","programIds","accountMetas","accountMeta","includes","pubkey","isSigner","isWritable","sort","x","y","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","findIndex","feePayerIndex","payerMeta","splice","console","warn","signedKeys","unsignedKeys","indexOf","meta","invariant","keyIndex","_compile","message","valid","every","pair","serializeMessage","setSigners","signers","seen","Set","filter","has","uniqueSigners","signer","_partialSign","_verifySignatures","partialSign","detached","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","verify","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","sendAndConfirmTransaction","connection","options","sendOptions","skipPreflight","preflightCommitment","commitment","sendTransaction","status","confirmTransaction","JSON","stringify","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","decodeData","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","ixType","entries","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","base","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","createAccount","params","transfer","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","Loader","chunkSize","getMinNumSignatures","Math","ceil","load","payer","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","error","owner","dataLayout","array","transactions","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","DESTROY_TIMEOUT_MS","AgentManager","_newAgent","useHttps","keepAlive","maxSockets","https","Agent","http","_useHttps","_agent","requestStart","_activeRequests","_destroyTimeout","clearTimeout","requestEnd","destroy","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","promiseTimeout","promise","timeoutMs","timeoutId","timeoutPromise","race","then","result","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","createRpcResult","union","pick","jsonrpc","id","code","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","create","jsonRpcResultAndContext","context","slot","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetEpochInfoResult","epoch","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","slotsPerEpoch","leaderScheduleSlotOffset","warmup","boolean","firstNormalEpoch","firstNormalSlot","GetLeaderScheduleResult","record","TransactionErrorResult","nullable","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","logs","createRpcClient","url","agentManager","clientBrowser","RpcClient","request","callback","agent","method","body","headers","too_many_requests_retries","res","waitTime","fetch","log","statusText","text","ok","createRpcRequest","client","reject","response","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","amount","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","rentEpoch","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","Array","isArray","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddressRpcResult","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","version","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","TransactionFromConfirmed","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","writable","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetConfirmedBlockRpcResult","blockhash","previousBlockhash","parentSlot","rewards","postBalance","rewardType","GetConfirmedTransactionRpcResult","GetParsedConfirmedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","Connection","endpoint","urlParse","protocol","_rpcClient","href","_rpcRequest","_rpcBatchRequest","_commitment","_blockhashInfo","lastFetch","transactionSignatures","simulatedSignatures","host","port","String","Number","_rpcWebSocket","RpcWebSocketClient","urlFormat","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","getBalanceAndContext","_buildArgs","unsafeRes","getBalance","catch","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getStakeActivation","getProgramAccounts","getParsedProgramAccounts","decodedSignature","assert","start","Date","now","subscriptionCommitment","subscriptionId","confirmPromise","onSignature","removeSignatureListener","duration","toFixed","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSignatureStatus","values","getSignatureStatuses","getTransactionCount","getTotalSupply","getInflationGovernor","getEpochInfo","getEpochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","limit","getFeeCalculatorForBlockhash","getRecentBlockhash","getVersion","getConfirmedBlock","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","startSlot","endSlot","getConfirmedSignaturesForAddress2","getNonceAndContext","accountInfo","getNonce","requestAirdrop","to","_recentBlockhash","disableCache","_pollingBlockhash","timeSinceFetch","expired","_pollNewBlockhash","startTime","simulateTransaction","_disableBlockhashCaching","encodedTransaction","encoding","sigVerify","sendRawTransaction","rawTransaction","sendEncodedTransaction","traceIndent","logTrace","join","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","setInterval","notify","_updateSubscriptions","clearInterval","_resetSubscriptions","_subscribe","sub","rpcMethod","rpcArgs","call","_unsubscribe","unsubscribeId","_accountChangeSubscriptions","s","_programAccountChangeSubscriptions","_signatureSubscriptions","_slotSubscriptions","_rootSubscriptions","programKeys","slotKeys","signatureKeys","rootKeys","logsKeys","_logsSubscriptions","_rpcWebSocketIdleTimeout","close","connect","mentions","notification","onAccountChange","_accountChangeSubscriptionCounter","removeAccountChangeListener","subInfo","accountId","onProgramAccountChange","_programAccountChangeSubscriptionCounter","removeProgramAccountChangeListener","onLogs","_logsSubscriptionCounter","removeOnLogsListener","onSlotChange","_slotSubscriptionCounter","removeSlotChangeListener","override","extra","_signatureSubscriptionCounter","onSignatureWithOptions","onRootChange","_rootSubscriptionCounter","removeRootChangeListener","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","delegate","authorize","authorizeWithSeed","split","withdraw","deactivate","publicKeyCreate","ecdsaSign","secp256k1","PRIVATE_KEY_BYTES","ETHEREUM_ADDRESS_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","u16","Secp256k1Program","publicKeyToEthAddress","keccak_256","update","digest","createInstructionWithPublicKey","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","startsWith","substr","dataStart","ethAddressOffset","signatureOffset","messageDataOffset","numSignatures","signatureInstructionIndex","ethAddressInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","pkey","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","name","website","details","keybaseUsername","ValidatorInfo","info","fromConfigData","configKeyCount","configKeys","rawInfo","parse","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","authorizedVoterPubkey","authorizedWithdrawerPubkey","votes","credits","lastEpochCredits","va","rootSlotValid","sendAndConfirmRawTransaction","devnet","testnet","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL"],"mappings":"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"}